function [memb, ordering] = speakeasy2(g, opts)
%SPEAKEASY2 community detection
%   MEMBERSHIP = SPEAKEASY2(G) Cluster the graph G.
%
%   [MEMB, ORDERING] = SPEAKEASY2(G) provide an index vector to order nodes
%   based on the community they are in, in order from largest community to
%   smallest. This can be used with HEATMAP or IMAGESC to help display
%   communities.
%
%   SPEAKEASY2('VERSION') display the toolbox version.
%
%   VERSION = SPEAKEASY2('VERSION') return the toolbox version string.
%
%   MEMBERSHIP = SPEAKEASY2(G, 'PARAM1', VAL1, 'PARAM2', VAL2, ...) the
%   behavior of speakeasy2 can be modified through name-value pairs. Available
%   options are described in the table below.
%
%        Name              Description
%       ------------------------------------------------------------------
%        isdirected        Whether the graph is directed or not. By default,
%                          guesses based on whether the adjacency matrix is
%                          symmetric or triangular.
%        discardTransient  The number of partitions to ignore before tracking
%                          (default 3).
%        independentRuns   Number of independent runs to perform (default 10).
%        maxThreads        Number of threads to use. By default (when set to 0)
%                          OpenMP determines the number of threads to use by
%                          following the OMP_NUM_THREADS environment variable
%                          if set, or detecting the available number of virtual
%                          cores.
%        seed              A random seed to set igraph's RNG with. By default
%                          this value is randomly generated by MATLAB's random
%                          number generator, so reproducible results can be
%                          obtained by setting MATLAB's RNG with RNG and
%                          ignoring this option.
%        targetClusters    The expected number of clusters to find. This
%                          option determines the number of tags to use in the
%                          initial conditions, but does not constrain the final
%                          number of clusters detected. Default is dependent on
%                          the size of the graph.
%        targetPartitions  Number of partitions to find per independent run
%                          (default 5).
%        verbose           Whether to print information about progress
%                          (default false)
%
%   See also SE2.ORDER

    arguments
        g {mustBeAdjOrVersion};
        opts.isdirected (1, 1) logical = isdirected(g);
        opts.discardTransient (1, 1) {mustBePositive, mustBeInteger} = 3;
        opts.independentRuns (1, 1) {mustBePositive, mustBeInteger} = 10;
        opts.maxThreads (1, 1) {mustBeNonnegative, mustBeInteger} = 0;
        opts.minClusters (1, 1) {mustBePositive, mustBeInteger} = 1;
        opts.multiCommunity (1, 1) {mustBePositive, mustBeInteger} = 1;
        opts.nodeConfidence (1, 1) logical = false;
        opts.seed (1, 1) {mustBePositive, mustBeInteger} = randi([1, 9999]);
        opts.subcluster (1, 1) {mustBePositive, mustBeInteger} = 1;
        opts.targetClusters (1, 1) {mustBePositive, mustBeInteger} = ...
            defaultTargetClusters(g);
        opts.targetPartitions (1, 1) {mustBePositive, mustBeInteger} = 5;
        opts.verbose = false;
    end

    if ischar(g) || isstring(g)
        if nargout == 0
            se2.version();
        else
            memb = se2.version();
        end
        return
    end

    if opts.multiCommunity ~= 1
        error("SE2:NotImplemented", ...
              "Multicommunity detection has not been implemented.");
    end

    if opts.nodeConfidence
        error("SE2:NotImplemented", ...
              "Node confidence has not been implemented.");
    end

    if (opts.subcluster ~= 1) || (opts.minClusters ~= 1)
        error("SE2:NotImplemented", ...
              "Subclustering has not been implemented.")
    end

    if nargout == 2
        [memb, ordering] = mexSE2(g, opts);
    else
        memb = mexSE2(g, opts);
    end
end

function n = defaultTargetClusters(g)
    nNodes = length(g);
    n = nNodes / 100;
    if n < 10
        n = 10;
    end

    if nNodes < 10
        n = nNodes;
    end
end
